// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: proto/generate/sum.proto

package sum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Plus_Add_FullMethodName = "/MicroservisPlus.Plus/Add"
)

// PlusClient is the client API for Plus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlusClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type plusClient struct {
	cc grpc.ClientConnInterface
}

func NewPlusClient(cc grpc.ClientConnInterface) PlusClient {
	return &plusClient{cc}
}

func (c *plusClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Plus_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlusServer is the server API for Plus service.
// All implementations must embed UnimplementedPlusServer
// for forward compatibility
type PlusServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	//mustEmbedUnimplementedPlusServer()
}

// UnimplementedPlusServer must be embedded to have forward compatible implementations.
type UnimplementedPlusServer struct {
}

func (UnimplementedPlusServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPlusServer) mustEmbedUnimplementedPlusServer() {}

// UnsafePlusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlusServer will
// result in compilation errors.
type UnsafePlusServer interface {
	mustEmbedUnimplementedPlusServer()
}

func RegisterPlusServer(s grpc.ServiceRegistrar, srv PlusServer) {
	s.RegisterService(&Plus_ServiceDesc, srv)
}

func _Plus_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlusServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plus_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlusServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plus_ServiceDesc is the grpc.ServiceDesc for Plus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MicroservisPlus.Plus",
	HandlerType: (*PlusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Plus_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/generate/sum.proto",
}
